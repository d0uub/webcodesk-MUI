import isEqual from 'lodash/isEqual';
import React from 'react';
import { test1Types } from './test1.props';

const styles = {
  root: {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center'
  },
  containerStyle: {
    marginTop: '1em',
    marginBottom: '1em',
    display: 'flex',
    justifyContent: 'center',
    alignItems: 'center'
  }
};

/**
 * test1 is generated by Webcodesk. Replace this comment with a valuable description.
 */
class test1 extends React.Component {
  constructor(props) {
    super(props);
    const { inputText, styling } = this.props;
    this.state = {
      prevStyling: styling,
      rootStyle: { ...styling, ...styles.root },
      localInputText: inputText || ''
    };
  }

  static getDerivedStateFromProps(props, state) {
    if (props.styling !== state.prevStyling) {
      const newRootStyle = { ...props.styling, ...styles.root };
      if (!isEqual(newRootStyle, state.rootStyle)) {
        return {
          prevStyling: props.styling,
          rootStyle: newRootStyle
        };
      }
    }
    return null;
  }

  shouldComponentUpdate(nextProps, nextState, nextContext) {
    const { localInputText, rootStyle } = this.state;
    const { data } = this.props;
    return (
      localInputText !== nextState.localInputText ||
      data !== nextProps.data ||
      rootStyle !== nextState.rootStyle
    );
  }

  componentDidUpdate(prevProps, prevState, snapshot) {
    const { inputText } = this.props;
    const { localInputText } = this.state;
    if (inputText !== prevProps.inputText && localInputText !== inputText) {
      this.setState({
        localInputText: inputText || ''
      });
    }
  }

  handleChangeInputValue = e => {
    this.setState({
      localInputText: e.target.value
    });
    this.props.onInputTextChange({
      enteredText: e.target.value
    });
  };

  handleButtonClick = e => {
    if (e) {
      e.stopPropagation();
      e.preventDefault();
    }
    this.props.onSubmit({
      enteredText: this.state.localInputText
    });
  };

  render() {
    const { data, cells } = this.props;
    const { rootStyle, localInputText } = this.state;
    return (
<div style={{bottom: '931px', boxSizing: 'border-box', fontFamily: 'Roboto, sans-serif', height: '38px', insetBlockEnd: '931px', left: '0px', position: 'absolute', right: '0px', top: '0px', width: '1920px', WebkitFontSmoothing: 'antialiased'}} className = {"jss2"} ><div style={{bottom: '931px', boxSizing: 'border-box', insetBlockEnd: '931px', left: '0px', position: 'fixed', right: '0px', top: '0px', zIndex: 10}} className = {"jss4"} ><div style={{alignItems: 'center', backgroundColor: 'rgba(45, 45, 45, 0.98)', bottom: '0px', boxSizing: 'border-box', display: 'flex', justifyContent: 'center', left: '0px', minBlockSize: '38px', minHeight: '38px', position: 'relative', right: '0px', top: '0px'}} className = {"jss8 jss7 jss10 jss5"} dense = {"true"} ><a style={{alignItems: 'center', borderBlockEndColor: 'rgb(255, 255, 255)', borderBlockStartColor: 'rgb(255, 255, 255)', borderBottomColor: 'rgb(255, 255, 255)', borderBottomLeftRadius: '16px', borderBottomRightRadius: '16px', borderInlineEndColor: 'rgb(255, 255, 255)', borderInlineStartColor: 'rgb(255, 255, 255)', borderLeftColor: 'rgb(255, 255, 255)', borderRightColor: 'rgb(255, 255, 255)', borderTopColor: 'rgb(255, 255, 255)', borderTopLeftRadius: '16px', borderTopRightRadius: '16px', bottom: '0px', boxSizing: 'border-box', caretColor: 'rgb(255, 255, 255)', color: 'rgb(255, 255, 255)', columnRuleColor: 'rgb(255, 255, 255)', cursor: 'pointer', display: 'flex', fontSize: '13px', insetInlineStart: '0px', justifyContent: 'center', left: '0px', lineHeight: '22.75px', marginInlineStart: '6px', marginLeft: '6px', minBlockSize: '24px', minHeight: '24px', minInlineSize: '64px', minWidth: '64px', outlineColor: 'rgb(255, 255, 255)', paddingBottom: '2px', paddingLeft: '8px', paddingRight: '8px', paddingTop: '2px', position: 'relative', right: '0px', textDecoration: 'none', textDecorationColor: 'rgb(255, 255, 255)', textEmphasisColor: 'rgb(255, 255, 255)', top: '0px', transitionDelay: '0s, 0s, 0s', transitionDuration: '0.25s, 0.25s, 0.25s', transitionProperty: 'background-color, box-shadow, border', transitionTimingFunction: 'cubic-bezier(0.4, 0, 0.2, 1), cubic-bezier(0.4, 0, 0.2, 1), cubic-bezier(0.4, 0, 0.2, 1)', userSelect: 'none', verticalAlign: 'middle', whiteSpace: 'nowrap', WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)', WebkitTextFillColor: 'rgb(255, 255, 255)', WebkitTextStrokeColor: 'rgb(255, 255, 255)'}} className = {"jss41 jss15 jss17 jss20 jss38 jss14"} tabIndex = {0} role = {"button"} href = {"https://bitalphaai.app/"} title = {"Bitalpha AI Official Website"} ><span style={{alignItems: 'center', boxSizing: 'border-box', display: 'flex', justifyContent: 'center'}} className = {"jss16"} ><i style={{boxSizing: 'border-box', fontFamily: 'Font Awesome 5 Free', fontStyle: 'normal', fontWeight: 900, lineHeight: '13px', paddingLeft: '3px', paddingRight: '3px'}} className = {"fas fa-coins"} ></i><span style={{boxSizing: 'border-box', marginInlineStart: '3px', marginLeft: '3px'}} className = {"jss13"} ><span style={{boxSizing: 'border-box'}} >Bitalpha AI Official Website</span></span></span></a><a style={{alignItems: 'center', borderBlockEndColor: 'rgb(255, 255, 255)', borderBlockStartColor: 'rgb(255, 255, 255)', borderBottomColor: 'rgb(255, 255, 255)', borderBottomLeftRadius: '16px', borderBottomRightRadius: '16px', borderInlineEndColor: 'rgb(255, 255, 255)', borderInlineStartColor: 'rgb(255, 255, 255)', borderLeftColor: 'rgb(255, 255, 255)', borderRightColor: 'rgb(255, 255, 255)', borderTopColor: 'rgb(255, 255, 255)', borderTopLeftRadius: '16px', borderTopRightRadius: '16px', bottom: '0px', boxSizing: 'border-box', caretColor: 'rgb(255, 255, 255)', color: 'rgb(255, 255, 255)', columnRuleColor: 'rgb(255, 255, 255)', cursor: 'pointer', display: 'flex', fontSize: '13px', insetInlineStart: '0px', justifyContent: 'center', left: '0px', lineHeight: '22.75px', marginInlineStart: '6px', marginLeft: '6px', minBlockSize: '24px', minHeight: '24px', minInlineSize: '64px', minWidth: '64px', outlineColor: 'rgb(255, 255, 255)', paddingBottom: '2px', paddingLeft: '8px', paddingRight: '8px', paddingTop: '2px', position: 'relative', right: '0px', textDecoration: 'none', textDecorationColor: 'rgb(255, 255, 255)', textEmphasisColor: 'rgb(255, 255, 255)', top: '0px', transitionDelay: '0s, 0s, 0s', transitionDuration: '0.25s, 0.25s, 0.25s', transitionProperty: 'background-color, box-shadow, border', transitionTimingFunction: 'cubic-bezier(0.4, 0, 0.2, 1), cubic-bezier(0.4, 0, 0.2, 1), cubic-bezier(0.4, 0, 0.2, 1)', userSelect: 'none', verticalAlign: 'middle', whiteSpace: 'nowrap', WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)', WebkitTextFillColor: 'rgb(255, 255, 255)', WebkitTextStrokeColor: 'rgb(255, 255, 255)'}} className = {"jss41 jss15 jss17 jss20 jss38 jss14"} tabIndex = {0} role = {"button"} href = {"documentation/"} title = {"Documentation and tutorials"} ><span style={{alignItems: 'center', boxSizing: 'border-box', display: 'flex', justifyContent: 'center'}} className = {"jss16"} ><i style={{boxSizing: 'border-box', fontFamily: 'Font Awesome 5 Free', fontStyle: 'normal', fontWeight: 900, lineHeight: '13px', paddingLeft: '3px', paddingRight: '3px'}} className = {"fas fa-book"} ></i><span style={{boxSizing: 'border-box', marginInlineStart: '3px', marginLeft: '3px'}} className = {"jss13"} ><span style={{boxSizing: 'border-box'}} >Documentation</span></span></span></a><a style={{alignItems: 'center', borderBlockEndColor: 'rgb(255, 255, 255)', borderBlockStartColor: 'rgb(255, 255, 255)', borderBottomColor: 'rgb(255, 255, 255)', borderBottomLeftRadius: '16px', borderBottomRightRadius: '16px', borderInlineEndColor: 'rgb(255, 255, 255)', borderInlineStartColor: 'rgb(255, 255, 255)', borderLeftColor: 'rgb(255, 255, 255)', borderRightColor: 'rgb(255, 255, 255)', borderTopColor: 'rgb(255, 255, 255)', borderTopLeftRadius: '16px', borderTopRightRadius: '16px', bottom: '0px', boxSizing: 'border-box', caretColor: 'rgb(255, 255, 255)', color: 'rgb(255, 255, 255)', columnRuleColor: 'rgb(255, 255, 255)', cursor: 'pointer', display: 'flex', fontSize: '13px', insetInlineStart: '0px', justifyContent: 'center', left: '0px', lineHeight: '22.75px', marginInlineStart: '6px', marginLeft: '6px', minBlockSize: '24px', minHeight: '24px', minInlineSize: '64px', minWidth: '64px', outlineColor: 'rgb(255, 255, 255)', paddingBottom: '2px', paddingLeft: '8px', paddingRight: '8px', paddingTop: '2px', position: 'relative', right: '0px', textDecoration: 'none', textDecorationColor: 'rgb(255, 255, 255)', textEmphasisColor: 'rgb(255, 255, 255)', top: '0px', transitionDelay: '0s, 0s, 0s', transitionDuration: '0.25s, 0.25s, 0.25s', transitionProperty: 'background-color, box-shadow, border', transitionTimingFunction: 'cubic-bezier(0.4, 0, 0.2, 1), cubic-bezier(0.4, 0, 0.2, 1), cubic-bezier(0.4, 0, 0.2, 1)', userSelect: 'none', verticalAlign: 'middle', whiteSpace: 'nowrap', WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)', WebkitTextFillColor: 'rgb(255, 255, 255)', WebkitTextStrokeColor: 'rgb(255, 255, 255)'}} className = {"jss41 jss15 jss17 jss20 jss38 jss14"} tabIndex = {0} role = {"button"} href = {"videos/"} title = {"Discover Webcodesk watching videos"} ><span style={{alignItems: 'center', boxSizing: 'border-box', display: 'flex', justifyContent: 'center'}} className = {"jss16"} ><i style={{boxSizing: 'border-box', fontFamily: 'Font Awesome 5 Free', fontStyle: 'normal', fontWeight: 900, lineHeight: '13px', paddingLeft: '3px', paddingRight: '3px'}} className = {"fas fa-play"} ></i><span style={{boxSizing: 'border-box', marginInlineStart: '3px', marginLeft: '3px'}} className = {"jss13"} ><span style={{boxSizing: 'border-box'}} >Videos</span></span></span></a><a style={{alignItems: 'center', borderBlockEndColor: 'rgb(255, 255, 255)', borderBlockStartColor: 'rgb(255, 255, 255)', borderBottomColor: 'rgb(255, 255, 255)', borderBottomLeftRadius: '16px', borderBottomRightRadius: '16px', borderInlineEndColor: 'rgb(255, 255, 255)', borderInlineStartColor: 'rgb(255, 255, 255)', borderLeftColor: 'rgb(255, 255, 255)', borderRightColor: 'rgb(255, 255, 255)', borderTopColor: 'rgb(255, 255, 255)', borderTopLeftRadius: '16px', borderTopRightRadius: '16px', bottom: '0px', boxSizing: 'border-box', caretColor: 'rgb(255, 255, 255)', color: 'rgb(255, 255, 255)', columnRuleColor: 'rgb(255, 255, 255)', cursor: 'pointer', display: 'flex', fontSize: '13px', insetInlineStart: '0px', justifyContent: 'center', left: '0px', lineHeight: '22.75px', marginInlineStart: '6px', marginLeft: '6px', minBlockSize: '24px', minHeight: '24px', minInlineSize: '64px', minWidth: '64px', outlineColor: 'rgb(255, 255, 255)', paddingBottom: '2px', paddingLeft: '8px', paddingRight: '8px', paddingTop: '2px', position: 'relative', right: '0px', textDecoration: 'none', textDecorationColor: 'rgb(255, 255, 255)', textEmphasisColor: 'rgb(255, 255, 255)', top: '0px', transitionDelay: '0s, 0s, 0s', transitionDuration: '0.25s, 0.25s, 0.25s', transitionProperty: 'background-color, box-shadow, border', transitionTimingFunction: 'cubic-bezier(0.4, 0, 0.2, 1), cubic-bezier(0.4, 0, 0.2, 1), cubic-bezier(0.4, 0, 0.2, 1)', userSelect: 'none', verticalAlign: 'middle', whiteSpace: 'nowrap', WebkitTapHighlightColor: 'rgba(0, 0, 0, 0)', WebkitTextFillColor: 'rgb(255, 255, 255)', WebkitTextStrokeColor: 'rgb(255, 255, 255)'}} className = {"jss41 jss15 jss17 jss20 jss38 jss14"} tabIndex = {0} role = {"button"} href = {"https://spectrum.chat/webcodesk"} target = {"__blank"} title = {"Chat about Webcodesk, ask or answer questions"} ><span style={{alignItems: 'center', boxSizing: 'border-box', display: 'flex', justifyContent: 'center'}} className = {"jss16"} ><i style={{boxSizing: 'border-box', fontFamily: 'Font Awesome 5 Free', fontStyle: 'normal', fontWeight: 900, lineHeight: '13px', paddingLeft: '3px', paddingRight: '3px'}} className = {"fas fa-comments"} ></i><span style={{boxSizing: 'border-box', marginInlineStart: '3px', marginLeft: '3px'}} className = {"jss13"} ><span style={{boxSizing: 'border-box'}} >Community</span></span></span></a></div></div></div>
    );
  }
}

test1.propTypes = test1Types;

test1.defaultProps = {
  styling: {
    padding: '1em',
    margin: '4em',
    borderColor: '#cdcdcd',
    borderWidth: '2px',
    borderStyle: 'dotted'
  },
  data: {
    title: 'Empty Title Value',
    placeholder: 'Enter text',
    inputText: '',
    inputObject: {},
    inputArray: []
  },
  cells: [<div>Placeholder</div>],
  onInputTextChange: () => {
    console.info('test1.onInputTextChange is not set');
  },
  onSubmit: () => {
    console.info('test1.onSubmit is not set');
  }
};

export default test1;
